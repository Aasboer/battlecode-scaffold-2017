// This is the build file we use to compile and run Battlecode players.
// We're using Gradle: https://gradle.org/

// Apply some plugins so that Gradle can automatically infer some config.
apply plugin: 'java'
//apply plugin: 'scala'
//apply plugin: 'kotlin'

apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

// Override Gradle's defaults for project setup.
sourceSets {
    main {
        java.srcDirs = ["src"]
        output.classesDir = "$buildDir/src"
    }

    test {
        java.srcDirs = ["test"]
        output.classesDir = "$buildDir/tests"
    }
}

repositories {
    // Let Gradle know about our own repository for hosting Battlecode.
    maven {
        url "http://battlecode-maven-test-aaarblgarbl.s3-website-us-east-1.amazonaws.com/"
    }
}

// Mark the client as a special dependency, so that we can handle it separately.
configurations {
    client
}

// Download a different version of the client depending on the local OS.
def os = System.getProperty("os.name").toLowerCase()
def clientName = os.startsWith('windows') ? 'battlecode-client-win' :
                 os.startsWith('mac') ? 'battlecode-client-mac' :
                 'battlecode-client-linux'

// Tell Gradle to download the game and client.
dependencies {
    compile group: 'org.battlecode', name: 'battlecode', version: '2017.+'
    client group: 'org.battlecode', name: clientName, version: '2017.+'
}

// Eclipse specifc setup to enable docs and sources
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Default configuration for running matches
if (!project.hasProperty("teamA")) {
    ext.teamA = "examplefuncsplayer"
}
if (!project.hasProperty("teamB")) {
    ext.teamB = "examplefuncsplayer"
}
if (!project.hasProperty("maps")) {
    ext.maps = "shrine"
}

task run(type: JavaExec, dependsOn: 'build') {
    description 'Runs a match without starting the client.'

    main = 'battlecode.server.Main'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-c=-']
    jvmArgs = [
        '-Dbc.server.mode=headless',
        '-Dbc.server.map-path=maps',
        '-Dbc.server.debug=true',
        '-Dbc.engine.debug-methods=true',
        '-Dbc.game.team-a='+project.property('teamA'),
        '-Dbc.game.team-b='+project.property('teamB'),
        '-Dbc.game.team-a.url='+sourceSets.main.output.classesDir,
        '-Dbc.game.team-b.url='+sourceSets.main.output.classesDir,
        '-Dbc.game.maps='+project.property('maps'),
        '-Dbc.server.save-file=' + 'matches/' + project.property('teamA') + '-vs-' + project.property('teamB') + '-on-' + project.property('maps') + '.bc17'
    ]
}

task unpackClient(type: Copy, dependsOn: configurations.client) {
    description 'Downloads the client.'

    dependsOn configurations.client

    from {
        configurations.client.collect {
            zipTree(it)
        }
    }
    into 'client/'
}

task listPlayers {
    description 'Lists all available players.'

    doLast {
        sourceSets.main.allJava.each {
            if (it.toString().endsWith('/RobotPlayer.java')) {
                URI base = new File(project.projectDir, 'src').toURI()
                URI full = it.toURI()
                String path = base.relativize(full).toString()
                println path.substring(0, path.lastIndexOf('/')).replaceAll('/', '.')
            }
        }
    }
}

task listMaps {
    description 'Lists all available maps.'

    doLast {
        sourceSets.main.compileClasspath.each {
            if (it.toString().contains('battlecode-2017')) {
                FileCollection fc = zipTree(it)
                fc += fileTree(dir: 'matches')
                fc.each {
                    String fn = it.toString()
                    if (fn.endsWith('.map17')) {
                        int startPos = fn.lastIndexOf('/') + 1
                        int endPos = fn.lastIndexOf('.')
                        println fn.substring(startPos, endPos)
                    }
                }
            }
        }
    }
}
